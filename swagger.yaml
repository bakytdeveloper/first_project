openapi: 3.0.0
info:
  title: First Project
  description: API для управления пользователями и задачами
  version: 1.0.0
servers:
  - url: 'http://localhost:3001/api'
    description: Локальный сервер
paths:
  /users/register:
    post:
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: strongpassword
                role:
                  type: string
                  enum: [admin, user]
                  example: user
      responses:
        '201':
          description: Пользователь создан
        '400':
          description: Неверный запрос
        '500':
          description: Ошибка сервера

  /users:
    get:
      summary: Получение списка пользователей
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          schema:
            type: string
            default: createdAt
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Список пользователей
        '401':
          description: Необходима авторизация
        '500':
          description: Ошибка сервера

  /users/login:
    post:
      summary: Вход пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: strongpassword
      responses:
        '200':
          description: Успешный вход, токен возвращен
        '400':
          description: Неверный запрос
        '500':
          description: Ошибка сервера

  /users/me:
    get:
      summary: Получение информации о текущем пользователе, после аутентификации
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Информация о текущем пользователе
        '401':
          description: Необходима авторизация
        '500':
          description: Ошибка сервера

  /users/{id}:
    put:
      summary: Обновление информации о пользователе
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                avatar:
                  type: string
      responses:
        '200':
          description: Информация о пользователе обновлена
        '400':
          description: Неверный запрос
        '404':
          description: Пользователь не найден
        '500':
          description: Ошибка сервера

    delete:
      summary: Удаление пользователя, только админом
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Пользователь удален
        '404':
          description: Пользователь не найден
        '500':
          description: Ошибка сервера

  /tasks:
    post:
      summary: Создание задачи, только админом
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                description:
                  type: string
                  example: Пример задачи
      responses:
        '201':
          description: Задача создана
        '400':
          description: Неверный запрос
        '500':
          description: Ошибка сервера

    get:
      summary: Получение списка задач, админ получает весь список, а пользователь только свой список
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          schema:
            type: string
            default: createdAt
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Список задач
        '401':
          description: Необходима авторизация
        '500':
          description: Ошибка сервера

  /tasks/{id}:
    get:
      summary: Получение задачи по ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Задача найдена
        '404':
          description: Задача не найдена
        '500':
          description: Ошибка сервера

    put:
      summary: Обновление задачи
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                completed:
                  type: boolean
      responses:
        '200':
          description: Задача обновлена
        '404':
          description: Задача не найдена
        '500':
          description: Ошибка сервера

    delete:
      summary: Удаление задачи
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Задача удалена
        '404':
          description: Задача не найдена
        '500':
          description: Ошибка сервера

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
